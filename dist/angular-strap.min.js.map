{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["placement","document","undefined","angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","bodyEl","$typeahead","options","scope","$scope","$matches","extend","config","$resetMatches","$$postDigest","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","update","test","$timeout","value","controller","$render","$emit","prefixEvent","parentScope","length","l","isString","$viewValue","i","preventDefault","stopPropagation","keyCode","$digest","show","$element","$onMouseDown","hide","on","$onKeyDown","TypeaheadFactory","directive","$window","body","link","require","restrict","falseValueRegExp","element","attr","key","bsOptions","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","isVisible","slice","$formatters","displayValue","modelValue","push","$getIndex","selected","$on","$isEmpty","val","destroy","isDefined","label","isObject","toString","module","animation","target","template","contentTemplate","title","type","autoClose","bsEnabled","viewport","selector","padding","String","htmlReplaceRegExp","$body","nodeName","toLowerCase","split","enterAnimateCallback","$tooltip","leaveAnimateCallback","_tipToHide","leave","$isShown","blur","tipElement","forEach","triggers","toggle","unbindTriggerEvents","enter","off","bindKeyboardEvents","$onKeyUp","isTouch","$onFocusElementMouseDown","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","rect","width","elRect","height","p","top","left","dimensions","offset","el","scroll","isBody","documentElement","getCalculatedOffset","position","actualWidth","actualHeight","outerDims","clientWidth","innerHeight","tip","marginTop","parseInt","using","props","css","isNaN","right","marginLeft","setOffset","delta","getViewportAdjustedDelta","isVertical","replaceArrow","arrowDelta","arrowOffsetPosition","viewportPadding","topEdgeOffset","$viewport","viewportDimensions","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","clearTimeout","timeout","tipScope","$destroy","$$phase","$options","fetchTemplate","$new","$rootScope","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","$promise","templateEl","contentEl","then","tipLinker","tipTemplate","init","data","isNumber","tipContainer","bindTriggerEvents","isElement","destroyTipElement","hoverState","parent","after","lastChild","display","visibility","clonedElement","safeDigest","version","minor","addClass","$animate","customClass","$$rAF","$applyPlacement","focus","_blur","elementPosition","autoPlace","originalPlacement","containerPosition","indexOf","tipHeight","removeClass","tipPosition","applyPlacement","tipWidth","fetchPromises","cache","$templateCache","res","TooltipFactory","$http","get","$location","transclusion","dataTarget","hasOwnProperty","tooltip","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","$timepicker","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","$iconUp","$iconDown","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","minute","$setViewValue","keep","Date","setHours","setMinutes","setSeconds","copy","hours","midIndex","$isSelected","disabled","minutes","seconds","minutesFormat","rows","showSeconds","secondsFormat","$isDisabled","showAM","timeSeparator","$date","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","hoursLength","targetDate","targetEl","triggerHandler","secondsLength","sepLength","lateralMove","count","minutesLength","selectRange","incr","isSeconds","isMeridian","createSelection","createTextRange","prop","_destroy","_show","_hide","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","getterSetter","parse","timezoneOffsetAdjust","NaN","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","splice","$setActive","name","fn","$pane","$tab","transclude","templateUrl","postLink","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","$isActive","prefixClass","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","b","a","dataMultiple","inputEl","isArray","join","spies","$document","windowEl","debounce","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","$trackedElements","sortedElements","activeTarget","debouncedCheckPosition","viewportHeight","throttledCheckPosition","debouncedCheckOffsets","scrollTop","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","activeElement","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","compile","childEl","children","querySelectorAll","child","content","$popover","PopoverFactory","requestAnimationFrame","popover","bsPopover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","bodyElement","$modal","ModalFactory","modalElement","currentTarget","preventEventDefault","$show","outerHTML","modalLinker","backdropElement","z-index","$compile","remove","defaultPrevented","backdropAnimation","hideOnBackdropClick","which","bsModal","modal","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","$values","displayFn","locals","valueName","valueFn","ParseOptionsFactory","groupByFn","keyName","when","parseValues","jqLite","currentStyle","window","getComputedStyle","extra","boxRect","getBoundingClientRect","style","offsetHeight","docElement","ownerDocument","curPosition","curLeft","curCSSTop","pageYOffset","clientTop","pageXOffset","scrollLeft","clientLeft","curCSSLeft","calculatePosition","curTop","curOffset","curElem","isFunction","call","offsetParentRect","offsetParentElement","offsetParent","offsetWidth","outer","func","immediate","factory","apply","context","args","cancel","callNow","leading","trailing","wait","year","$localeProvider","milliseconds","ParseDate","prototype","array","isNumeric","n","isFinite","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","noop","toDate","regExpMap","sss","$locale","dateFilter","mm","keys","setFnMap","clonedFormat","search","v","sortedMap","regExpForFormat","re","text","Object","escapeReservedSymbols","regex","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","$format","baseDate","setMap","formatRegex","formatSetMap","setMapForFormat","exec","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","$apply","updateSelected","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","$eval","disabledDates","daySplit","arr","mod","arrays","size","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDate","getDay","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","firstMonth","months","lastDate","actualMonth","firstYear","years","actualYear","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$toggles","$unregisterToggle","$registerToggle","$unregisterTarget","deactivateItem","$viewChangeListeners","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","controllers","bsCollapseToggle","$registerTarget","action","toggleEvent","removeAttr","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","equals","checked","bind","toggleClass","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","setWidth","initialAffixTop","getRequiredAffixClass","unpin","getScrollTop","scrollHeight","getScrollHeight","initialOffsetTop","offsetBottom","affixed","$parseOffsets","affix","elementHeight","offsetUnpin","$debouncedOnResize","$onResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      template: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'filter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function(){\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if(scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0: -1;\n          }\n\n          // When the placement is not one of the bottom placements, re-calc the positioning\n          // so the results render correctly.\n          if (/^(bottom|bottom-left|bottom-right)$/.test(options.placement)) return;\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          $timeout($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if(index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if(parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if(evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if(options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if(options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if(!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        element.attr('autocomplete' ,'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if(filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if(limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if(options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            // Prevent input with no future prospect if selectMode is truthy\n            // @TODO test selectMode\n            if(options.selectMode && !values.length && newValue.length > 0) {\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n              return;\n            }\n            if(values.length > limit) values = values.slice(0, limit);\n            var isVisible = typeahead.$isVisible();\n            isVisible && typeahead.update(values);\n            // Do not re-queue an update if a correct value has been selected\n            if(values.length === 1 && values[0].value === newValue) return;\n            !isVisible && typeahead.update(values);\n            // Queue a new rendering that will leverage collection loading\n            controller.$render();\n          });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) return displayValue;\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      template: 'tooltip/tooltip.tpl.html',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var nodeName = element[0].nodeName.toLowerCase();\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        $tooltip.$promise = fetchTemplate(options.template);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Support contentTemplate option\n        if(options.contentTemplate) {\n          $tooltip.$promise = $tooltip.$promise.then(function(template) {\n            var templateEl = angular.element(template);\n            return fetchTemplate(options.contentTemplate)\n            .then(function(contentTemplate) {\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\n              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\n              contentEl.removeAttr('ng-bind').html(contentTemplate);\n              return templateEl[0].outerHTML;\n            });\n          });\n        }\n\n        // Fetch, compile then initialize tooltip\n        var tipLinker, tipElement, tipTemplate, tipContainer, tipScope;\n        $tooltip.$promise.then(function(template) {\n          if(angular.isObject(template)) template = template.data;\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n          template = trim.apply(template);\n          tipTemplate = template;\n          tipLinker = $compile(template);\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = tipLinker(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n          });\n\n          // Bind events\n          if(options.keyboard) {\n            if(options.trigger !== 'focus') {\n              $tooltip.focus();\n            }\n            bindKeyboardEvents();\n          }\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var container = options.container ? findElement(options.container) : element.parent();\n            var containerPosition = getPosition(container);\n\n            // Determine if the vertical placement\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > containerPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < containerPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\n                elementPosition.right + tipWidth > containerPosition.width) {\n\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\n                elementPosition.left - tipWidth < containerPosition.left) {\n\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n            case 'top':\n              offset.top = position.top - actualHeight;\n              break;\n            case 'bottom':\n              offset.top = position.top + position.height;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = { top: 0, left: 0 },\n              $viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          if (!$viewport) {\n           return delta;\n          }\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0,\n              viewportDimensions = getPosition($viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset    = position.top - viewportPadding - viewportDimensions.scroll,\n                bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset  = position.left - viewportPadding,\n                rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      template: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time)\n        {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\n            $timepicker.$build();\n          } else if(!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if(!angular.isDate(date)) date = new Date(date);\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if(index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if(options.autoclose && !keep) {\n            $timeout(function() { $timepicker.hide(true); });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [], hour;\n          for(i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\n          }\n          var minutes = [], minute;\n          for(i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\n          }\n          var seconds = [], second;\n          for(i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({date: second, label: formatDate(second, secondsFormat), selected: $timepicker.$date && $timepicker.$isSelected(second, 2), disabled: $timepicker.$isDisabled(second, 2)});\n          }\n\n          var rows = [];\n          for(i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if(!$timepicker.$date) return false;\n          else if(index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if(index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if(index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if(index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if(index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if(index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value,index);\n          } else {\n            $timepicker.$moveIndex(value,index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          }\n          else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          }\n          else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if(index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {hour: targetDate.getHours()});\n          } else if(index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\n          } else if(index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {second: targetDate.getSeconds()});\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if(evt.keyCode === 13) return $timepicker.hide(true);\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if(selectedIndex === 0) {\n            newDate.setHours(hours + incr*parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if(selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr*parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if(isSeconds) {\n            newDate.setSeconds(seconds + incr*parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if(isMeridian) {\n            if(!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength)*showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if(element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if(element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if(angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if(options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if(!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if(options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!timepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(function () {\n          if (controller.$options && controller.$options.getterSetter) {\n            return scope.$eval(attr.ngModel)();\n          }\n          return scope.$eval(attr.ngModel);\n        }, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(!isValid) {\n              return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if(options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.timeType === 'number') {\n            return date.getTime();\n          } else if(options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if(options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        if(angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if(angular.isString(active)) {\n          activeIndex = self.$panes.map(function(pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      template: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        }\n        else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(controller.$modelValue && scope.$matches.length) {\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            }\n          } else if(scope.$activeIndex >= scope.$matches.length) {\n            scope.$activeIndex = options.multiple ? [] : 0;\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          if(!options.multiple && !controller.$modelValue) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if(angular.isDefined(dataMultiple)) {\n          if(falseValueRegExp.test(dataMultiple))\n            options.multiple = false;\n          else\n            options.multiple = dataMultiple;\n        }\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if(options.multiple){\n          controller.$isEmpty = function(value){\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      template: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          popover.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function() {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function() {\n\n          return $location.path();\n\n        }, function(newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function(li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if(options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if(regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      template: 'modal/modal.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var trim = String.prototype.trim;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        $modal.$promise = fetchTemplate(options.template);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if(!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function(key) {\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Support contentTemplate option\n        if(options.contentTemplate) {\n          $modal.$promise = $modal.$promise.then(function(template) {\n            var templateEl = angular.element(template);\n            return fetchTemplate(options.contentTemplate)\n            .then(function(contentTemplate) {\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\n              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n              if(!config.template) contentEl.next().remove();\n              return templateEl[0].outerHTML;\n            });\n          });\n        }\n\n        // Fetch, compile then initialize modal\n        var modalLinker, modalElement;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\n        $modal.$promise.then(function(template) {\n          if(angular.isObject(template)) template = template.data;\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n          template = trim.apply(template);\n          modalLinker = $compile(template);\n          $modal.init();\n        });\n\n        $modal.init = function() {\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function() {\n\n          // Remove element\n          if(modalElement) {\n            modalElement.remove();\n            modalElement = null;\n          }\n          if(backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $modal.show = function() {\n          if($modal.$isShown) return;\n\n          var parent, after;\n          if(angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // Fetch a cloned element linked from template\n          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\n\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) {\n            if(options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if(options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          if(options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n          if(options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function() {\n          if(!$modal.$isShown) return;\n\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if(options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n          if(options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function() {\n\n          $modal.$isShown ? $modal.hide() : $modal.show();\n\n        };\n\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function(evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        // Private methods\n\n        function hideOnBackdropClick(evt) {\n          if(evt.target !== evt.currentTarget) return;\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\n.factory('$$rAF', function($window, $timeout) {\n\n  var requestAnimationFrame = $window.requestAnimationFrame ||\n                              $window.webkitRequestAnimationFrame ||\n                              $window.mozRequestAnimationFrame;\n\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                             $window.webkitCancelAnimationFrame ||\n                             $window.mozCancelAnimationFrame ||\n                             $window.webkitCancelRequestAnimationFrame;\n\n  var rafSupported = !!requestAnimationFrame;\n  var raf = rafSupported ?\n    function(fn) {\n      var id = requestAnimationFrame(fn);\n      return function() {\n        cancelAnimationFrame(id);\n      };\n    } :\n    function(fn) {\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n      return function() {\n        $timeout.cancel(timer);\n      };\n    };\n\n  raf.supported = rafSupported;\n\n  return raf;\n\n});\n\n// .factory('$$animateReflow', function($$rAF, $document) {\n\n//   var bodyEl = $document[0].body;\n\n//   return function(fn) {\n//     //the returned function acts as the cancellation function\n//     return $$rAF(function() {\n//       //the line below will force the browser to perform a repaint\n//       //so that all the animated elements within the animation frame\n//       //will be properly updated and drawn on screen. This is\n//       //required to perform multi-class CSS based animations with\n//       //Firefox. DO NOT REMOVE THIS LINE.\n//       var a = bodyEl.offsetWidth + 1;\n//       fn();\n//     });\n//   };\n\n// });\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n  \n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = fn.css(element, 'position'),\n          curElem = angular.element(element),\n          props = {};\n      \n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n      \n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n      \n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      \n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n      \n      if (options.top !== null ) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if ( options.left !== null ) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function($timeout) {\n  return function(func, wait, immediate) {\n    var timeout = null;\n    return function() {\n      var context = this,\n        args = arguments,\n        callNow = immediate && !timeout;\n      if(timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if(!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if(callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function($timeout) {\n  return function(func, wait, options) {\n    var timeout = null;\n    options || (options = {});\n    return function() {\n      var context = this,\n        args = arguments;\n      if(!timeout) {\n        if(options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if(options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : proto.setFullYear\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function setMapForFormat(format) {\n        var keys = Object.keys(setFnMap), i;\n        var map = [], sortedMap = [];\n        // Map to setFn\n        var clonedFormat = format;\n        for(i = 0; i < keys.length; i++) {\n          if(format.split(keys[i]).length > 1) {\n            var index = clonedFormat.search(keys[i]);\n            format = format.split(keys[i]).join('');\n            if(setFnMap[keys[i]]) {\n              map[index] = setFnMap[keys[i]];\n            }\n          }\n        }\n        // Sort result map\n        angular.forEach(map, function(v) {\n          // conditional required since angular.forEach broke around v1.2.21\n          // related pr: https://github.com/angular/angular.js/pull/8525\n          if(v) sortedMap.push(v);\n        });\n        return sortedMap;\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function regExpForFormat(format) {\n        var keys = Object.keys(regExpMap), i;\n\n        var re = format;\n        // Abstract replaces to avoid collisions\n        for(i = 0; i < keys.length; i++) {\n          re = re.split(keys[i]).join('${' + i + '}');\n        }\n        // Replace abstracted values\n        for(i = 0; i < keys.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n        }\n        format = escapeReservedSymbols(format);\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function() {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function(format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function(lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function(date, format, lang, timezone){\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      template: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if(!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && index > 0) index--;\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\n          else if(angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if(!$dropdown.$isShown) return;\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if(evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as an object\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n          scope.content = newValue;\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!dropdown || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n          newValue === true ? dropdown.show() : dropdown.hide();\n        });\n\n        // Initialize dropdown\n        var dropdown = $dropdown(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (dropdown) dropdown.destroy();\n          options = null;\n          dropdown = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      template: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if(options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if(!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if(options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if(pristine === true && $picker.built) return;\n          if(pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if(evt.keyCode === 13) {\n            if(!scope.$mode) {\n              return $datepicker.hide(true);\n            } else {\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if(!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if(!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!datepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(function () {\n          if (controller.$options && controller.$options.getterSetter) {\n            return scope.$eval(attr.ngModel)();\n          }\n          return scope.$eval(attr.ngModel);\n        }, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if(options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.dateType === 'number') {\n            return date.getTime();\n          } else if(options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if(options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if(!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key]))\n          self.$options[key] = false;\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      template: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function($window, $sce, $aside) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      template: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if(options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if(options.duration) {\n          $alert.show = function() {\n            show();\n            $timeout(function() {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function($window, $sce, $alert) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n          if(affix === 'top') {\n            unpin = null;\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles){\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles){\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\n          if(angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: function($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      template: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'filter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function(){\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if(scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0: -1;\n          }\n\n          // When the placement is not one of the bottom placements, re-calc the positioning\n          // so the results render correctly.\n          if (/^(bottom|bottom-left|bottom-right)$/.test(options.placement)) return;\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          $timeout($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if(index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if(parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if(evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if(options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if(options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if(!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        element.attr('autocomplete' ,'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if(filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if(limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if(options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            // Prevent input with no future prospect if selectMode is truthy\n            // @TODO test selectMode\n            if(options.selectMode && !values.length && newValue.length > 0) {\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n              return;\n            }\n            if(values.length > limit) values = values.slice(0, limit);\n            var isVisible = typeahead.$isVisible();\n            isVisible && typeahead.update(values);\n            // Do not re-queue an update if a correct value has been selected\n            if(values.length === 1 && values[0].value === newValue) return;\n            !isVisible && typeahead.update(values);\n            // Queue a new rendering that will leverage collection loading\n            controller.$render();\n          });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) return displayValue;\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      template: 'tooltip/tooltip.tpl.html',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var nodeName = element[0].nodeName.toLowerCase();\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        $tooltip.$promise = fetchTemplate(options.template);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Support contentTemplate option\n        if(options.contentTemplate) {\n          $tooltip.$promise = $tooltip.$promise.then(function(template) {\n            var templateEl = angular.element(template);\n            return fetchTemplate(options.contentTemplate)\n            .then(function(contentTemplate) {\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\n              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\n              contentEl.removeAttr('ng-bind').html(contentTemplate);\n              return templateEl[0].outerHTML;\n            });\n          });\n        }\n\n        // Fetch, compile then initialize tooltip\n        var tipLinker, tipElement, tipTemplate, tipContainer, tipScope;\n        $tooltip.$promise.then(function(template) {\n          if(angular.isObject(template)) template = template.data;\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n          template = trim.apply(template);\n          tipTemplate = template;\n          tipLinker = $compile(template);\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = tipLinker(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n          });\n\n          // Bind events\n          if(options.keyboard) {\n            if(options.trigger !== 'focus') {\n              $tooltip.focus();\n            }\n            bindKeyboardEvents();\n          }\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var container = options.container ? findElement(options.container) : element.parent();\n            var containerPosition = getPosition(container);\n\n            // Determine if the vertical placement\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > containerPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < containerPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\n                elementPosition.right + tipWidth > containerPosition.width) {\n\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\n                elementPosition.left - tipWidth < containerPosition.left) {\n\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n            case 'top':\n              offset.top = position.top - actualHeight;\n              break;\n            case 'bottom':\n              offset.top = position.top + position.height;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = { top: 0, left: 0 },\n              $viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          if (!$viewport) {\n           return delta;\n          }\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0,\n              viewportDimensions = getPosition($viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset    = position.top - viewportPadding - viewportDimensions.scroll,\n                bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset  = position.left - viewportPadding,\n                rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      template: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time)\n        {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\n            $timepicker.$build();\n          } else if(!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if(!angular.isDate(date)) date = new Date(date);\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if(index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if(options.autoclose && !keep) {\n            $timeout(function() { $timepicker.hide(true); });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [], hour;\n          for(i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\n          }\n          var minutes = [], minute;\n          for(i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\n          }\n          var seconds = [], second;\n          for(i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({date: second, label: formatDate(second, secondsFormat), selected: $timepicker.$date && $timepicker.$isSelected(second, 2), disabled: $timepicker.$isDisabled(second, 2)});\n          }\n\n          var rows = [];\n          for(i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if(!$timepicker.$date) return false;\n          else if(index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if(index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if(index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if(index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if(index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if(index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value,index);\n          } else {\n            $timepicker.$moveIndex(value,index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          }\n          else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          }\n          else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if(index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {hour: targetDate.getHours()});\n          } else if(index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\n          } else if(index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {second: targetDate.getSeconds()});\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if(evt.keyCode === 13) return $timepicker.hide(true);\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if(selectedIndex === 0) {\n            newDate.setHours(hours + incr*parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if(selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr*parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if(isSeconds) {\n            newDate.setSeconds(seconds + incr*parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if(isMeridian) {\n            if(!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength)*showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if(element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if(element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if(angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if(options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if(!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if(options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!timepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(function () {\n          if (controller.$options && controller.$options.getterSetter) {\n            return scope.$eval(attr.ngModel)();\n          }\n          return scope.$eval(attr.ngModel);\n        }, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(!isValid) {\n              return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if(options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.timeType === 'number') {\n            return date.getTime();\n          } else if(options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if(options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        if(angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if(angular.isString(active)) {\n          activeIndex = self.$panes.map(function(pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      template: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        }\n        else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(controller.$modelValue && scope.$matches.length) {\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            }\n          } else if(scope.$activeIndex >= scope.$matches.length) {\n            scope.$activeIndex = options.multiple ? [] : 0;\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          if(!options.multiple && !controller.$modelValue) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if(angular.isDefined(dataMultiple)) {\n          if(falseValueRegExp.test(dataMultiple))\n            options.multiple = false;\n          else\n            options.multiple = dataMultiple;\n        }\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if(options.multiple){\n          controller.$isEmpty = function(value){\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      template: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          popover.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function() {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function() {\n\n          return $location.path();\n\n        }, function(newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function(li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if(options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if(regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      template: 'modal/modal.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var trim = String.prototype.trim;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        $modal.$promise = fetchTemplate(options.template);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n        if(!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function(key) {\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Support contentTemplate option\n        if(options.contentTemplate) {\n          $modal.$promise = $modal.$promise.then(function(template) {\n            var templateEl = angular.element(template);\n            return fetchTemplate(options.contentTemplate)\n            .then(function(contentTemplate) {\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\n              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n              if(!config.template) contentEl.next().remove();\n              return templateEl[0].outerHTML;\n            });\n          });\n        }\n\n        // Fetch, compile then initialize modal\n        var modalLinker, modalElement;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\n        $modal.$promise.then(function(template) {\n          if(angular.isObject(template)) template = template.data;\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\n          template = trim.apply(template);\n          modalLinker = $compile(template);\n          $modal.init();\n        });\n\n        $modal.init = function() {\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function() {\n\n          // Remove element\n          if(modalElement) {\n            modalElement.remove();\n            modalElement = null;\n          }\n          if(backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $modal.show = function() {\n          if($modal.$isShown) return;\n\n          var parent, after;\n          if(angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // Fetch a cloned element linked from template\n          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\n\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) {\n            if(options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if(options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          if(options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n          if(options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function() {\n          if(!$modal.$isShown) return;\n\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if(options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n          if(options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function() {\n\n          $modal.$isShown ? $modal.hide() : $modal.show();\n\n        };\n\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function(evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        // Private methods\n\n        function hideOnBackdropClick(evt) {\n          if(evt.target !== evt.currentTarget) return;\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\n.factory('$$rAF', function($window, $timeout) {\n\n  var requestAnimationFrame = $window.requestAnimationFrame ||\n                              $window.webkitRequestAnimationFrame ||\n                              $window.mozRequestAnimationFrame;\n\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                             $window.webkitCancelAnimationFrame ||\n                             $window.mozCancelAnimationFrame ||\n                             $window.webkitCancelRequestAnimationFrame;\n\n  var rafSupported = !!requestAnimationFrame;\n  var raf = rafSupported ?\n    function(fn) {\n      var id = requestAnimationFrame(fn);\n      return function() {\n        cancelAnimationFrame(id);\n      };\n    } :\n    function(fn) {\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n      return function() {\n        $timeout.cancel(timer);\n      };\n    };\n\n  raf.supported = rafSupported;\n\n  return raf;\n\n});\n\n// .factory('$$animateReflow', function($$rAF, $document) {\n\n//   var bodyEl = $document[0].body;\n\n//   return function(fn) {\n//     //the returned function acts as the cancellation function\n//     return $$rAF(function() {\n//       //the line below will force the browser to perform a repaint\n//       //so that all the animated elements within the animation frame\n//       //will be properly updated and drawn on screen. This is\n//       //required to perform multi-class CSS based animations with\n//       //Firefox. DO NOT REMOVE THIS LINE.\n//       var a = bodyEl.offsetWidth + 1;\n//       fn();\n//     });\n//   };\n\n// });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n  \n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = fn.css(element, 'position'),\n          curElem = angular.element(element),\n          props = {};\n      \n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n      \n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n      \n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      \n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n      \n      if (options.top !== null ) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if ( options.left !== null ) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function($timeout) {\n  return function(func, wait, immediate) {\n    var timeout = null;\n    return function() {\n      var context = this,\n        args = arguments,\n        callNow = immediate && !timeout;\n      if(timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if(!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if(callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function($timeout) {\n  return function(func, wait, options) {\n    var timeout = null;\n    options || (options = {});\n    return function() {\n      var context = this,\n        args = arguments;\n      if(!timeout) {\n        if(options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if(options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : proto.setFullYear\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function setMapForFormat(format) {\n        var keys = Object.keys(setFnMap), i;\n        var map = [], sortedMap = [];\n        // Map to setFn\n        var clonedFormat = format;\n        for(i = 0; i < keys.length; i++) {\n          if(format.split(keys[i]).length > 1) {\n            var index = clonedFormat.search(keys[i]);\n            format = format.split(keys[i]).join('');\n            if(setFnMap[keys[i]]) {\n              map[index] = setFnMap[keys[i]];\n            }\n          }\n        }\n        // Sort result map\n        angular.forEach(map, function(v) {\n          // conditional required since angular.forEach broke around v1.2.21\n          // related pr: https://github.com/angular/angular.js/pull/8525\n          if(v) sortedMap.push(v);\n        });\n        return sortedMap;\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function regExpForFormat(format) {\n        var keys = Object.keys(regExpMap), i;\n\n        var re = format;\n        // Abstract replaces to avoid collisions\n        for(i = 0; i < keys.length; i++) {\n          re = re.split(keys[i]).join('${' + i + '}');\n        }\n        // Replace abstracted values\n        for(i = 0; i < keys.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n        }\n        format = escapeReservedSymbols(format);\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function() {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function(format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function(lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function(date, format, lang, timezone){\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      template: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if(!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && index > 0) index--;\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\n          else if(angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if(!$dropdown.$isShown) return;\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if(evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as an object\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n          scope.content = newValue;\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!dropdown || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n          newValue === true ? dropdown.show() : dropdown.hide();\n        });\n\n        // Initialize dropdown\n        var dropdown = $dropdown(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (dropdown) dropdown.destroy();\n          options = null;\n          dropdown = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      template: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if(options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if(!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if(options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if(pristine === true && $picker.built) return;\n          if(pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if(evt.keyCode === 13) {\n            if(!scope.$mode) {\n              return $datepicker.hide(true);\n            } else {\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if(!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if(!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!datepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(function () {\n          if (controller.$options && controller.$options.getterSetter) {\n            return scope.$eval(attr.ngModel)();\n          }\n          return scope.$eval(attr.ngModel);\n        }, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if(options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.dateType === 'number') {\n            return date.getTime();\n          } else if(options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if(options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if(!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key]))\n          self.$options[key] = false;\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      template: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function($window, $sce, $aside) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      template: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if(options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if(options.duration) {\n          $alert.show = function() {\n            show();\n            $timeout(function() {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function($window, $sce, $alert) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n          if(affix === 'top') {\n            unpin = null;\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles){\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles){\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\n          if(angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: function($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}